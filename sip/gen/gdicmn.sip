//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
// 
// Copyright: (c) 2010 by Total Control Software
// Licence:   wxWindows license
//
// This file is included from _core.sip
//
//---------------------------------------------------------------------------


%ModuleHeaderCode
#include <wx/wx.h>
%End


//---------------------------------------------------------------------------

class wxPoint   /PyName=Point/
{
%TypeHeaderCode
    #include <wx/gdicmn.h>
%End

public:
    wxPoint();

    wxPoint(
        int x,
        int y
    );

    wxPoint(
        const wxRealPoint & pt
    );

    wxPoint & operator+=(
        const wxPoint & pt
    );

    wxPoint & operator+=(
        const wxSize & sz
    );

    wxPoint & operator-=(
        const wxPoint & pt
    );

    wxPoint & operator-=(
        const wxSize & sz
    );

    bool IsFullySpecified();

    void SetDefaults(
        const wxPoint & pt
    );

    int x;
    int y;
%ConvertToTypeCode
   // is it just a typecheck?
   if (!sipIsErr) {
       if (sipCanConvertToType(sipPy, sipType_wxPoint, SIP_NO_CONVERTORS))
           return 1;

       if (PySequence_Check(sipPy) and PySequence_Size(sipPy) == 2) {
           int rval = 1;
           PyObject* o1 = PySequence_ITEM(sipPy, 0);
           PyObject* o2 = PySequence_ITEM(sipPy, 1);
           if (!PyNumber_Check(o1) || !PyNumber_Check(o2)) 
               rval = 0;
           Py_DECREF(o1);
           Py_DECREF(o2);
           return rval;
       }
       return 0;
   }   
   
   // otherwise do the conversion
   if (sipPy == Py_None) {
       *sipCppPtr = new wxPoint(-1, -1);
       return sipGetState(sipTransferObj);
   }
   
   if (PySequence_Check(sipPy)) {
       PyObject* o1 = PySequence_ITEM(sipPy, 0);
       PyObject* o2 = PySequence_ITEM(sipPy, 1);
       *sipCppPtr = new wxPoint(PyInt_AsLong(o1), PyInt_AsLong(o2));
       Py_DECREF(o1);
       Py_DECREF(o2);
       return sipGetState(sipTransferObj);
    }
    
    *sipCppPtr = reinterpret_cast<wxPoint*>(sipConvertToType(
                sipPy, sipType_wxPoint, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));
    return 0;
%End
};  // end of class wxPoint


bool operator==(const wxPoint& p1, const wxPoint& p2);
bool operator!=(const wxPoint& p1, const wxPoint& p2);
wxPoint operator+(const wxPoint& p, const wxSize& s);
wxPoint operator+(const wxPoint& p1, const wxPoint& p2);
wxPoint operator+(const wxSize& s, const wxPoint& p);
wxPoint operator-(const wxPoint& p);
wxPoint operator-(const wxPoint& p, const wxSize& s);
wxPoint operator-(const wxPoint& p1, const wxPoint& p2);
wxPoint operator-(const wxSize& s, const wxPoint& p);
wxPoint operator*(const wxPoint& s, int i);
wxPoint operator*(int i, const wxPoint& s);
wxPoint operator/(const wxPoint& s, int i);


class wxSize   /PyName=Size/
{
%TypeHeaderCode
    #include <wx/gdicmn.h>
%End

public:
    wxSize();

    wxSize(
        int width,
        int height
    );

    void DecBy(
        const wxPoint & pt
    );

    void DecBy(
        const wxSize & size
    );

    void DecBy(
        int dx,
        int dy
    );

    void DecBy(
        int d
    );

    void IncBy(
        const wxPoint & pt
    );

    void IncBy(
        const wxSize & size
    );

    void IncBy(
        int dx,
        int dy
    );

    void IncBy(
        int d
    );

    wxSize & operator+=(
        const wxSize & sz
    );

    wxSize & operator-=(
        const wxSize & sz
    );

    wxSize & operator/=(
        int factor
    );

    wxSize & operator*=(
        int factor
    );

    void DecTo(
        const wxSize & size
    );

    int GetHeight();

    int GetWidth();

    void IncTo(
        const wxSize & size
    );

    bool IsFullySpecified();

    wxSize & Scale(
        float xscale,
        float yscale
    );

    void Set(
        int width,
        int height
    );

    void SetDefaults(
        const wxSize & sizeDefault
    );

    void SetHeight(
        int height
    );

    void SetWidth(
        int width
    );

    %Property(name=width, get=GetWidth, set=SetWidth)
    %Property(name=height, get=GetHeight, set=SetHeight)
};  // end of class wxSize


bool operator==(const wxSize& s1, const wxSize& s2);
bool operator!=(const wxSize& s1, const wxSize& s2);
wxSize operator*(const wxSize& s, int i);
wxSize operator*(int i, const wxSize& s);
wxSize operator+(const wxSize& s1, const wxSize& s2);
wxSize operator-(const wxSize& s1, const wxSize& s2);
wxSize operator/(const wxSize& s, int i);


class wxRect   /PyName=Rect/
{
%TypeHeaderCode
    #include <wx/gdicmn.h>
%End

public:
    wxRect();

    wxRect(
        int x,
        int y,
        int width,
        int height
    );

    wxRect(
        const wxPoint & topLeft,
        const wxPoint & bottomRight
    );

    wxRect(
        const wxPoint & pos,
        const wxSize & size
    );

    wxRect(
        const wxSize & size
    );

    wxRect CentreIn(
        const wxRect & r,
        int dir = wxBOTH
    );

    wxRect CenterIn(
        const wxRect & r,
        int dir = wxBOTH
    );

    wxRect & Deflate(
        wxCoord dx,
        wxCoord dy
    );

    wxRect & Deflate(
        const wxSize & diff
    );

    wxRect & Deflate(
        wxCoord diff
    );

    wxRect & Inflate(
        wxCoord dx,
        wxCoord dy
    );

    wxRect & Inflate(
        const wxSize & diff
    );

    wxRect & Inflate(
        wxCoord diff
    );

    void Offset(
        wxCoord dx,
        wxCoord dy
    );

    void Offset(
        const wxPoint & pt
    );

    wxRect & Union(
        const wxRect & rect
    );

    wxRect & operator+=(
        const wxRect & r
    );

    wxRect & operator*=(
        const wxRect & r
    );

    int height;
    int width;
    int x;
    int y;
    bool Contains(
        int x,
        int y
    );

    bool Contains(
        const wxPoint & pt
    );

    bool Contains(
        const wxRect & rect
    );

    int GetBottom();

    wxPoint GetBottomLeft();

    wxPoint GetBottomRight();

    int GetHeight();

    int GetLeft();

    wxPoint GetPosition();

    int GetRight();

    wxSize GetSize();

    int GetTop();

    wxPoint GetTopLeft();

    wxPoint GetTopRight();

    int GetWidth();

    int GetX();

    int GetY();

    wxRect & Intersect(
        const wxRect & rect
    );

    bool Intersects(
        const wxRect & rect
    );

    bool IsEmpty();

    void SetHeight(
        int height
    );

    void SetSize(
        const wxSize & s
    );

    void SetWidth(
        int width
    );

    void SetX(
        int x
    );

    void SetY(
        int y
    );

};  // end of class wxRect


bool operator==(const wxRect& r1, const wxRect& r2);
bool operator!=(const wxRect& r1, const wxRect& r2);
wxRect operator+(const wxRect& r1, const wxRect& r2);
wxRect operator*(const wxRect& r1, const wxRect& r2);


class wxRealPoint   /PyName=RealPoint/
{
%TypeHeaderCode
    #include <wx/gdicmn.h>
%End

public:
    wxRealPoint();

    wxRealPoint(
        double x,
        double y
    );

    wxRealPoint(
        const wxPoint & pt
    );

    wxRealPoint & operator+=(
        const wxRealPoint & pt
    );

    wxRealPoint & operator+=(
        const wxSize & sz
    );

    wxRealPoint & operator-=(
        const wxRealPoint & pt
    );

    wxRealPoint & operator-=(
        const wxSize & sz
    );

    double x;
    double y;
};  // end of class wxRealPoint


bool operator==(const wxRealPoint& p1, const wxRealPoint& p2);
bool operator!=(const wxRealPoint& p1, const wxRealPoint& p2);
wxRealPoint operator*(const wxRealPoint& s, double i);
wxRealPoint operator*(double i, const wxRealPoint& s);
wxRealPoint operator+(const wxRealPoint& p1, const wxRealPoint& p2);
wxRealPoint operator-(const wxRealPoint& p1, const wxRealPoint& p2);
wxRealPoint operator/(const wxRealPoint& s, int i);


enum wxBitmapType   /PyName=BitmapType/
{
    wxBITMAP_TYPE_INVALID   /PyName=BITMAP_TYPE_INVALID/,
    wxBITMAP_TYPE_BMP   /PyName=BITMAP_TYPE_BMP/,
    wxBITMAP_TYPE_ICO   /PyName=BITMAP_TYPE_ICO/,
    wxBITMAP_TYPE_CUR   /PyName=BITMAP_TYPE_CUR/,
    wxBITMAP_TYPE_XBM   /PyName=BITMAP_TYPE_XBM/,
    wxBITMAP_TYPE_XBM_DATA   /PyName=BITMAP_TYPE_XBM_DATA/,
    wxBITMAP_TYPE_XPM   /PyName=BITMAP_TYPE_XPM/,
    wxBITMAP_TYPE_XPM_DATA   /PyName=BITMAP_TYPE_XPM_DATA/,
    wxBITMAP_TYPE_TIF   /PyName=BITMAP_TYPE_TIF/,
    wxBITMAP_TYPE_GIF   /PyName=BITMAP_TYPE_GIF/,
    wxBITMAP_TYPE_PNG   /PyName=BITMAP_TYPE_PNG/,
    wxBITMAP_TYPE_JPEG   /PyName=BITMAP_TYPE_JPEG/,
    wxBITMAP_TYPE_PNM   /PyName=BITMAP_TYPE_PNM/,
    wxBITMAP_TYPE_PCX   /PyName=BITMAP_TYPE_PCX/,
    wxBITMAP_TYPE_PICT   /PyName=BITMAP_TYPE_PICT/,
    wxBITMAP_TYPE_ICON   /PyName=BITMAP_TYPE_ICON/,
    wxBITMAP_TYPE_ANI   /PyName=BITMAP_TYPE_ANI/,
    wxBITMAP_TYPE_IFF   /PyName=BITMAP_TYPE_IFF/,
    wxBITMAP_TYPE_TGA   /PyName=BITMAP_TYPE_TGA/,
    wxBITMAP_TYPE_MACCURSOR   /PyName=BITMAP_TYPE_MACCURSOR/,
    wxBITMAP_TYPE_ANY   /PyName=BITMAP_TYPE_ANY/
};

enum wxPolygonFillMode   /PyName=PolygonFillMode/
{
    wxODDEVEN_RULE   /PyName=ODDEVEN_RULE/,
    wxWINDING_RULE   /PyName=WINDING_RULE/
};

enum wxStockCursor   /PyName=StockCursor/
{
    wxCURSOR_NONE   /PyName=CURSOR_NONE/,
    wxCURSOR_ARROW   /PyName=CURSOR_ARROW/,
    wxCURSOR_RIGHT_ARROW   /PyName=CURSOR_RIGHT_ARROW/,
    wxCURSOR_BULLSEYE   /PyName=CURSOR_BULLSEYE/,
    wxCURSOR_CHAR   /PyName=CURSOR_CHAR/,
    wxCURSOR_CROSS   /PyName=CURSOR_CROSS/,
    wxCURSOR_HAND   /PyName=CURSOR_HAND/,
    wxCURSOR_IBEAM   /PyName=CURSOR_IBEAM/,
    wxCURSOR_LEFT_BUTTON   /PyName=CURSOR_LEFT_BUTTON/,
    wxCURSOR_MAGNIFIER   /PyName=CURSOR_MAGNIFIER/,
    wxCURSOR_MIDDLE_BUTTON   /PyName=CURSOR_MIDDLE_BUTTON/,
    wxCURSOR_NO_ENTRY   /PyName=CURSOR_NO_ENTRY/,
    wxCURSOR_PAINT_BRUSH   /PyName=CURSOR_PAINT_BRUSH/,
    wxCURSOR_PENCIL   /PyName=CURSOR_PENCIL/,
    wxCURSOR_POINT_LEFT   /PyName=CURSOR_POINT_LEFT/,
    wxCURSOR_POINT_RIGHT   /PyName=CURSOR_POINT_RIGHT/,
    wxCURSOR_QUESTION_ARROW   /PyName=CURSOR_QUESTION_ARROW/,
    wxCURSOR_RIGHT_BUTTON   /PyName=CURSOR_RIGHT_BUTTON/,
    wxCURSOR_SIZENESW   /PyName=CURSOR_SIZENESW/,
    wxCURSOR_SIZENS   /PyName=CURSOR_SIZENS/,
    wxCURSOR_SIZENWSE   /PyName=CURSOR_SIZENWSE/,
    wxCURSOR_SIZEWE   /PyName=CURSOR_SIZEWE/,
    wxCURSOR_SIZING   /PyName=CURSOR_SIZING/,
    wxCURSOR_SPRAYCAN   /PyName=CURSOR_SPRAYCAN/,
    wxCURSOR_WAIT   /PyName=CURSOR_WAIT/,
    wxCURSOR_WATCH   /PyName=CURSOR_WATCH/,
    wxCURSOR_BLANK   /PyName=CURSOR_BLANK/,
    wxCURSOR_DEFAULT   /PyName=CURSOR_DEFAULT/,
    wxCURSOR_COPY_ARROW   /PyName=CURSOR_COPY_ARROW/,
    wxCURSOR_ARROWWAIT   /PyName=CURSOR_ARROWWAIT/,
    wxCURSOR_MAX   /PyName=CURSOR_MAX/
};

const wxPoint wxDefaultPosition   /PyName=DefaultPosition/;

const wxSize wxDefaultSize   /PyName=DefaultSize/;

bool wxColourDisplay()   /PyName=ColourDisplay/;

int wxDisplayDepth()   /PyName=DisplayDepth/;

void wxClientDisplayRect(
    int * x   /Out/,
    int * y   /Out/,
    int * width   /Out/,
    int * height   /Out/
)   /PyName=ClientDisplayRect/;

wxRect wxGetClientDisplayRect()   /PyName=GetClientDisplayRect/;

wxSize wxGetDisplayPPI()   /PyName=GetDisplayPPI/;

void wxDisplaySize(
    int * width   /Out/,
    int * height   /Out/
)   /PyName=DisplaySize/;

wxSize wxGetDisplaySize()   /PyName=GetDisplaySize/;

void wxDisplaySizeMM(
    int * width   /Out/,
    int * height   /Out/
)   /PyName=DisplaySizeMM/;

wxSize wxGetDisplaySizeMM()   /PyName=GetDisplaySizeMM/;


//---------------------------------------------------------------------------

